"use strict";(self.webpackChunk_finos_perspective_docs=self.webpackChunk_finos_perspective_docs||[]).push([[1218],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(7294),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a().createContext({}),p=function(e){var t=a().useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a().createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a().createElement(a().Fragment,{},t)}},v=a().forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),v=r,m=d["".concat(o,".").concat(v)]||d[v]||u[v]||i;return n?a().createElement(m,s(s({ref:t},c),{},{components:n})):a().createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=v;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a().createElement.apply(null,o)}return a().createElement.apply(null,n)}v.displayName="MDXCreateElement"},2400:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return v},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(5773),a=n(808),i=(n(7294),n(3905)),o=["components"],s={id:"server",title:"Data Binding"},l=void 0,c={unversionedId:"server",id:"server",title:"Data Binding",description:"Application developers can choose from Client (WebAssembly),",source:"@site/docs/server.md",sourceDirName:".",slug:"/server",permalink:"/docs/server",draft:!1,tags:[],version:"current",frontMatter:{id:"server",title:"Data Binding"},sidebar:"tutorialSidebar",previous:{title:"View",permalink:"/docs/view"},next:{title:"perspective API",permalink:"/docs/obj/perspective"}},p={},d=[{value:"Client-only",id:"client-only",level:2},{value:"Javascript client",id:"javascript-client",level:4},{value:"Client/Server Replicated",id:"clientserver-replicated",level:2},{value:"Python and Tornado server",id:"python-and-tornado-server",level:4},{value:"Javascript client",id:"javascript-client-1",level:4},{value:"Server-only",id:"server-only",level:2}],u={toc:d};function v(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("img",{src:"/svg/architecture.svg"}),(0,i.kt)("p",null,"Application developers can choose from ",(0,i.kt)("a",{parentName:"p",href:"#client-only"},"Client (WebAssembly)"),",\n",(0,i.kt)("a",{parentName:"p",href:"#server-only"},"Server (Python/Node)")," or\n",(0,i.kt)("a",{parentName:"p",href:"#clientserver-replicated"},"Client/Server Replicated")," designs to bind data, and a\nweb application can use one or a mix of these designs as needed. By serializing\nto Apache Arrow, tables are duplicated and synchronized across runtimes\nefficiently."),(0,i.kt)("h2",{id:"client-only"},"Client-only"),(0,i.kt)("img",{src:"/svg/architecture.sub1.svg"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"For static datasets, datasets provided by the user, and simple server-less and\nread-only web applications.")),(0,i.kt)("p",null,"In this design, Perspective is run as a client Browser WebAssembly library, the\ndataset is downloaded entirely to the client and all calculations and UI\ninteractions are performed locally. Interactive performance is very good, using\nWebAssembly engine for near-native runtime plus WebWorker isolation for parallel\nrendering within the browser. Operations like scrolling and creating new views\nare responsive. However, the entire dataset must be downloaded to the client.\nPerspective is not a typical browser component, and datset sizes of 1gb+ in\nApache Arrow format will load fine with good interactive performance!"),(0,i.kt)("p",null,"Horizontal scaling is a non-issue, since here is no concurrent state to scale,\nand only uses client-side computation via WebAssembly client. Client-only\nperspective can support as many concurrent users as can download the web\napplication itself. Once the data is loaded, no server connection is needed and\nall operations occur in the client browser, imparting no additional runtime cost\non the server beyond initial load. This also means updates and edits are local\nto the browser client and will be lost when the page is refreshed, unless\notherwise persisted by your application."),(0,i.kt)("p",null,"As the client-only design starts with creating a client-side Perspective\n",(0,i.kt)("inlineCode",{parentName:"p"},"Table"),", data can be provided by any standard web service in any Perspective\ncompatible format (JSON, CSV or Apache Arrow)."),(0,i.kt)("h4",{id:"javascript-client"},"Javascript client"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const worker = perspective.worker();\nconst table = await worker.table(csv);\n\nconst viewer = document.createElement("perspective-viewer");\ndocument.body.appendChild(viewer);\nviewer.load(table);\n')),(0,i.kt)("h2",{id:"clientserver-replicated"},"Client/Server Replicated"),(0,i.kt)("img",{src:"/svg/architecture.sub3.svg"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"For medium-sized, real-time, synchronized and/or editable data sets with many\nconcurrent users.")),(0,i.kt)("p",null,"The dataset is instantiated in-memory with a Python or Node.js Perspective\nserver, and web applications create duplicates of these tables in a local\nWebAssembly client in the browser, synchonized efficiently to the server via\nApache Arrow. This design scales well with additional concurrent users, as\nbrowsers only need to download the initial data set and subsequent update\ndeltas, while operations like scrolling, pivots, sorting, etc. are performed on\nthe client."),(0,i.kt)("p",null,"Python servers can make especially good use of additional threads, as\nPerspective will\n",(0,i.kt)("a",{parentName:"p",href:"/docs/python#async-mode"},"release the GIL")," for\nalmost all operations. Interactive performance on the client is very good and\nidentical to client-only architecture. Updates and edits are seamlessly\nsynchonized across clients via their virtual server counterparts using\nwebsockets and Apache Arrow."),(0,i.kt)("h4",{id:"python-and-tornado-server"},"Python and Tornado server"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from perspective import Table, PerspectiveManager, PerspectiveTornadoHandler\n\ntable = Table(csv)\nmanager = PerspectiveManager()\nmanager.host("my_table", table)\nroutes = [(\n    r"/websocket",\n    PerspectiveTornadoHandler,\n    {"manager": manager, "check_origin": True},\n)]\n\napp = tornado.web.Application(routes)\napp.listen(8080)\nloop = tornado.ioloop.IOLoop.current()\nloop.start()\n')),(0,i.kt)("h4",{id:"javascript-client-1"},"Javascript client"),(0,i.kt)("p",null,"Perspective's websocket client interfaces with the Python server. then\n",(0,i.kt)("em",{parentName:"p"},"replicates")," the server-side Table."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const websocket = perspective.websocket("ws://localhost:8080");\nconst server_table = websocket.open("my_table");\nconst server_view = await server_table.view();\n\nconst worker = perspective.worker();\nconst client_table = await worker.table(server_view);\n\nconst viewer = document.createElement("perspective-viewer");\ndocument.body.appendChild(viewer);\nviewer.load(client_table);\n')),(0,i.kt)("h2",{id:"server-only"},"Server-only"),(0,i.kt)("img",{src:"/svg/architecture.sub2.svg"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"For extremely large datasets with a small number of concurrent users.")),(0,i.kt)("p",null,"The dataset is instantiated in-memory with a Python or Node.js server, and web\napplications connect virtually. Has very good initial load performance, since no\ndata is downloaded. Group-by and other operations will run column-parallel if\nconfigured."),(0,i.kt)("p",null,'But interactive performance is poor, as every user interaction must page the\nserver to render. Operations like scrolling are not as responsive and can be\nimpacted by network latency. Web applications must be "always connected" to the\nserver via WebSocket. Disconnecting will prevent any interaction, scrolling,\netc. of the UI. Does not use WebAssembly.'),(0,i.kt)("p",null,"Each connected browser will impact server performance as long as the connection\nis open, which in turn impacts interactive performance of every client. This\nultimately limits the horizontal scalabity of this architecture. Since each\nclient reads the perspective ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," virtually, changes like edits and updates\nare automatically reflected to all clients and persist across browser refresh.\nUsing the same Python server as the previous design, we can simply skip the\nintermediate WebAssembly ",(0,i.kt)("inlineCode",{parentName:"p"},"Table")," and pass the virtual table directly to ",(0,i.kt)("inlineCode",{parentName:"p"},"load()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const websocket = perspective.websocket("ws://localhost:8080");\nconst server_table = websocket.open("my_table");\n\nconst viewer = document.createElement("perspective-viewer");\ndocument.body.appendChild(viewer);\nviewer.load(server_table);\n')))}v.isMDXComponent=!0}}]);
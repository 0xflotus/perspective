"use strict";(self.webpackChunk_finos_perspective_docs=self.webpackChunk_finos_perspective_docs||[]).push([[618],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return k}});var a=n(7294),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i().createContext({}),u=function(e){var t=i().useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return i().createElement(p.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i().createElement(i().Fragment,{},t)}},m=i().forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,m=c["".concat(s,".").concat(d)]||c[d]||h[d]||r;return n?i().createElement(m,l(l({ref:t},p),{},{components:n})):i().createElement(m,l({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[d]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return i().createElement.apply(null,s)}return i().createElement.apply(null,n)}m.displayName="MDXCreateElement"},7857:function(e,t,n){n.r(t),n.d(t,{assets:function(){return o},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return r},metadata:function(){return l},toc:function(){return p}});var a=n(7462),i=(n(7294),n(3905));const r={id:"development",title:"Developer Guide"},s=void 0,l={unversionedId:"development",id:"development",title:"Developer Guide",description:"Thank you for your interest in contributing to Perspective! This guide will",source:"@site/docs/development.md",sourceDirName:".",slug:"/development",permalink:"/docs/development",draft:!1,tags:[],version:"current",frontMatter:{id:"development",title:"Developer Guide"},sidebar:"tutorialSidebar",previous:{title:"perspective-python API",permalink:"/docs/obj/perspective-python"}},o={},p=[{value:"System Dependencies",id:"system-dependencies",level:3},{value:"Build",id:"build",level:2},{value:"<code>Perspective.js</code>",id:"perspectivejs",level:2},{value:"Building via local EMSDK",id:"building-via-local-emsdk",level:4},{value:"<code>perspective-jupyterlab</code>",id:"perspective-jupyterlab",level:3},{value:"<code>perspective-python</code>",id:"perspective-python",level:2},{value:"System-Specific Instructions",id:"system-specific-instructions",level:2},{value:"MacOS/OSX",id:"macososx",level:3},{value:"Windows 10",id:"windows-10",level:3},{value:"Ubuntu/Debian",id:"ubuntudebian",level:3},{value:"Test",id:"test",level:2},{value:"JavaScript",id:"javascript",level:3},{value:"Python",id:"python",level:3},{value:"Troubleshooting installation from source",id:"troubleshooting-installation-from-source",level:3},{value:"Timezones in Python Tests",id:"timezones-in-python-tests",level:4},{value:"Benchmark",id:"benchmark",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Thank you for your interest in contributing to Perspective! This guide will\nteach you everything you need to know to get started hacking on the Perspective\ncodebase."),(0,i.kt)("p",null,"If you're coming to this project as principally a JavaScript developer, please\nbe aware that Perspective is quite a bit more complex than a typical NPM package\ndue to the mixed-language nature of the project; we've done quite a bit to make\nsure the newcomer experience is as straightforward as possible, but some things\nmight not work the way you're used to!"),(0,i.kt)("p",null,"Perspective is organized as a\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/babel/babel/blob/master/doc/design/monorepo.md"},"monorepo"),",\nand uses ",(0,i.kt)("a",{parentName:"p",href:"https://lernajs.io/"},"lerna")," to manage dependencies."),(0,i.kt)("p",null,"This guide provides instructions for both the JavaScript and Python libraries.\nTo switch your development toolchain between the two, use ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn setup"),". Once the\nsetup script has been run, common commands like ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn build")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn test"),"\nautomatically call the correct build and test tools."),(0,i.kt)("h3",{id:"system-dependencies"},"System Dependencies"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Perspective.js")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," ",(0,i.kt)("strong",{parentName:"p"},"require")," the following system\ndependencies to be installed:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cmake.org/"},"CMake")," (version 3.15.4 or higher)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.boost.org/"},"Boost")," (version 1.67 or higher, must be built - not\nheader-only)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://google.github.io/flatbuffers/flatbuffers_guide_building.html"},"Flatbuffers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/rustwasm/wasm-pack"},"wasm-pack"))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"This list may be non-exhaustive depending on your OS/environment; please open\na thread in ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/finos/perspective/discussions"},"Discussions")," if\nyou have any questions"))),(0,i.kt)("h2",{id:"build"},"Build"),(0,i.kt)("p",null,"Make sure you have the system dependencies installed. For specifics depending on\nyour OS, check the ",(0,i.kt)("a",{parentName:"p",href:"#system-specific-instructions"},"system-specific instructions"),"\nbelow."),(0,i.kt)("p",null,"To run a build, use"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn build\n")),(0,i.kt)("p",null,"If this is the first time you've built Perspective, you'll be asked to generate\na ",(0,i.kt)("inlineCode",{parentName:"p"},".perspectiverc")," via a short survey. This can be later re-configured via"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn setup\n")),(0,i.kt)("p",null,"If everything is successful, you should be able to run any of the ",(0,i.kt)("inlineCode",{parentName:"p"},"examples/"),"\npackages, e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"examples/blocks")," like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn start blocks\n")),(0,i.kt)("h2",{id:"perspectivejs"},(0,i.kt)("inlineCode",{parentName:"h2"},"Perspective.js")),(0,i.kt)("p",null,"To build the JavaScript library, which includes WebAssembly compilation,\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/kripken/emscripten"},"Emscripten")," and its prerequisites are\nrequired."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Perspective.js")," specifies its Emscripten version dependency in ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),",\nand the correct version of Emscripten will be installed with other JS\ndependencies by running ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn"),"."),(0,i.kt)("h4",{id:"building-via-local-emsdk"},"Building via local EMSDK"),(0,i.kt)("p",null,"To build using an Emscripten install on your local system and not the Emscripten\nbundled with Perspective in its ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://emscripten.org/docs/getting_started/downloads.html"},"install")," the\nEmscripten SDK, then activate and export the latest ",(0,i.kt)("inlineCode",{parentName:"p"},"emsdk")," environment via\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/juj/emsdk"},(0,i.kt)("inlineCode",{parentName:"a"},"emsdk_env.sh")),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"source emsdk/emsdk_env.sh\n")),(0,i.kt)("p",null,"We currently use Emscripten version ",(0,i.kt)("inlineCode",{parentName:"p"},"2.0.6")," \u2014 deviating from this specific\nversion of Emscripten can introduce various errors that are extremely difficult\nto debug."),(0,i.kt)("p",null,"To install this specific version of Emscripten:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./emsdk install 2.0.6\n")),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"perspective-jupyterlab"},(0,i.kt)("inlineCode",{parentName:"h3"},"perspective-jupyterlab")),(0,i.kt)("p",null,"To install the Jupyterlab plugin from your local working directory, give\n",(0,i.kt)("inlineCode",{parentName:"p"},"jupyter labextension install")," the path to the ",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-jupyterlab")," package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"jupyter labextension install ./packages/perspective-jupyterlab\n")),(0,i.kt)("p",null,'Afterwards, you should see it listed as a "local extension" when you run\n',(0,i.kt)("inlineCode",{parentName:"p"},"jupyter labextension list"),"."),(0,i.kt)("p",null,"Because we do not inline Perspective into the Jupyterlab plugin, your local\nchanges will not show up in Jupyterlab ",(0,i.kt)("strong",{parentName:"p"},"unless")," you use ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn link")," according\nto the directions below:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Ensure that your Jupyterlab is built by running ",(0,i.kt)("inlineCode",{parentName:"li"},"jupyter lab build"),"."),(0,i.kt)("li",{parentName:"ol"},"Inside each directory in ",(0,i.kt)("inlineCode",{parentName:"li"},"packages"),", run\n",(0,i.kt)("a",{parentName:"li",href:"https://classic.yarnpkg.com/en/docs/cli/link"},(0,i.kt)("inlineCode",{parentName:"a"},"yarn link")),". This will create\na symlink to your local build that we will use inside Jupyterlab."),(0,i.kt)("li",{parentName:"ol"},"From the Perspective root, run ",(0,i.kt)("inlineCode",{parentName:"li"},"yarn jlab_link"),". This is a script that will\nfind your Jupyterlab installation and tell Jupyterlab to use these symlinks\nwhen it looks for Perspective packages, instead of fetching them from NPM."),(0,i.kt)("li",{parentName:"ol"},"When you make a local change, make sure you run ",(0,i.kt)("inlineCode",{parentName:"li"},"yarn build")," ",(0,i.kt)("strong",{parentName:"li"},"and"),(0,i.kt)("inlineCode",{parentName:"li"},"jupyter lab build")," so that it fetches the newest changes."),(0,i.kt)("li",{parentName:"ol"},"Whenever you run ",(0,i.kt)("inlineCode",{parentName:"li"},"jupyter lab clean"),", you will need to run ",(0,i.kt)("inlineCode",{parentName:"li"},"yarn jlab_link"),"\nagain to re-register the symlinks.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"perspective-python"},(0,i.kt)("inlineCode",{parentName:"h2"},"perspective-python")),(0,i.kt)("p",null,"To build the Python library, first configure your project to build Python via\n",(0,i.kt)("inlineCode",{parentName:"p"},"yarn setup"),", then run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn build\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," supports Python 3.7 and upwards."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"system-specific-instructions"},"System-Specific Instructions"),(0,i.kt)("h3",{id:"macososx"},"MacOS/OSX"),(0,i.kt)("p",null,"Install system dependencies through Homebrew:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"brew install cmake\nbrew install boost\nbrew install flatbuffers\n")),(0,i.kt)("p",null,"On M1 (Apple Silicon) systems, make sure your brew-installed dependencies are in\n",(0,i.kt)("inlineCode",{parentName:"p"},"/opt/homebrew")," (the default location), and that ",(0,i.kt)("inlineCode",{parentName:"p"},"/opt/homebrew/bin")," is on the\n",(0,i.kt)("inlineCode",{parentName:"p"},"PATH"),"."),(0,i.kt)("h3",{id:"windows-10"},"Windows 10"),(0,i.kt)("p",null,"You need to use bash in order to build Perspective packages. To successfully\nbuild on Windows 10, enable\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/wsl/install-win10"},"Windows Subsystem for Linux"),"\n(WSL) and install the Linux distribution of your choice."),(0,i.kt)("p",null,"Create symbolic links to easily access Windows directories and projects modified\nvia Windows. This way, you can modify any of the Perspective files using your\nfavorite editors on Windows and build via Linux."),(0,i.kt)("p",null,"Follow the Linux specific instructions to install Emscripten and all\nprerequisite tools."),(0,i.kt)("h3",{id:"ubuntudebian"},"Ubuntu/Debian"),(0,i.kt)("p",null,"On Ubuntu, CMake will mistakenly resolve the system headers in ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/include"),"\nrather than the emscripten supplied versions. You can resolve this by moving\n",(0,i.kt)("inlineCode",{parentName:"p"},"boost")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"flatbuffers")," dependencies to somewhere other than ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/include")," -\ninto Perspective's own ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," dir (as per\n",(0,i.kt)("a",{parentName:"p",href:"http://vclf.blogspot.com/2014/08/emscripten-linking-to-boost-libraries.html"},"here"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'apt-get install libboost-all-dev\ncp -r /usr/include/boost ./packages/perspective/src/include/\n\ncd ./packages/perspective/src/include/\ngit clone https://github.com/google/flatbuffers.git\ncd flatbuffers\ncmake -G "Unix Makefiles"\nmake\nln -s /usr/local/flatbuffers/flatc /usr/local/bin/flatc\nchmod +x /usr/local/flatbuffers/flatc\n')),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"test"},"Test"),(0,i.kt)("p",null,"You can run the test suite simply with the standard NPM command, which will both\nbuild the test suite for every package and run them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test [--debug]\n")),(0,i.kt)("p",null,"A test name regex can be passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"jest")," via the same ",(0,i.kt)("inlineCode",{parentName:"p"},"-t")," flag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test -t 'button test (A|B)'\n")),(0,i.kt)("h3",{id:"javascript"},"JavaScript"),(0,i.kt)("p",null,"The JavaScript test suite is composed of two sections: a Node.js test, which\nasserts behavior of the ",(0,i.kt)("inlineCode",{parentName:"p"},"@finos/perspective")," library, and a suite of\n",(0,i.kt)("a",{parentName:"p",href:"https://developers.google.com/web/tools/puppeteer/"},"Puppeteer")," tests, which\nassert the behavior of the rest of the UI facing packages."),(0,i.kt)("p",null,"The Puppeteer/UI tests are a form of\n",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Characterization_test"},"characterization tests"),"\nwhich use screenshots to compare current and previous behavior of\n",(0,i.kt)("inlineCode",{parentName:"p"},"<perspective-viewer>")," and its plugins. The results of each comparison are\nstored in each package's ",(0,i.kt)("inlineCode",{parentName:"p"},"test/results/results.json")," file, and the screenshots\nthemselves are stored in the package's ",(0,i.kt)("inlineCode",{parentName:"p"},"tests/screenshots/")," directory, though only the\nformer should be checked into GIT. When a test in these suites fails, a\n",(0,i.kt)("inlineCode",{parentName:"p"},"file.failed.png")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"file.diff.png")," are also generated, showing the divergent\nscreenshot and a contrast diff respectively, so you can verify that the changed\nbehavior either does or does not reflect your patch. If you're confident that\nthe screenshots reflect your change, you can update the new hashes manually in\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"test/results/results.json")," file, or update all hashes with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--write"),"\nflag:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn test --write\n")),(0,i.kt)("h3",{id:"python"},"Python"),(0,i.kt)("p",null,"The Python test suite is built on Pytest, and it asserts the correct behavior of\nthe Python library."),(0,i.kt)("p",null,"If you have built the library with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--python2")," flag, make sure to run the\ntest suite using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--python2")," flag as well. Running a version of\n",(0,i.kt)("inlineCode",{parentName:"p"},"perspective-python")," built against Python 2 in Python 3 (and vice versa) is not\nsupported."),(0,i.kt)("p",null,"Verbosity in the tests can be enabled with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--verbose")," flag."),(0,i.kt)("h3",{id:"troubleshooting-installation-from-source"},"Troubleshooting installation from source"),(0,i.kt)("p",null,"If you are installing from a source distribution (sdist), make sure you have the\n",(0,i.kt)("a",{parentName:"p",href:"#system-dependencies"},"System Dependencies")," installed."),(0,i.kt)("p",null,"Try installing in verbose mode:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"pip install -vv perspective-python\n")),(0,i.kt)("p",null,"The most common culprits are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CMake version too old"),(0,i.kt)("li",{parentName:"ul"},"Boost headers are missing or too old"),(0,i.kt)("li",{parentName:"ul"},"Flatbuffers not installed prior to installing Perspective")),(0,i.kt)("h4",{id:"timezones-in-python-tests"},"Timezones in Python Tests"),(0,i.kt)("p",null,"Python tests are configured to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"UTC")," time zone. If running tests\nlocally, you might find that datetime-related tests fail to assert the correct\nvalues. To correct this, run tests with the ",(0,i.kt)("inlineCode",{parentName:"p"},"TZ=UTC"),", i.e."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"TZ=UTC yarn test --verbose\n")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"benchmark"},"Benchmark"),(0,i.kt)("p",null,"You can generate benchmarks specific to your machine's OS and CPU architecture\nwith Perspective's benchmark suite, which will generate a ",(0,i.kt)("inlineCode",{parentName:"p"},"report.html")," file in\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"build/")," directory of every package which supports benchmarks, as well as a\n",(0,i.kt)("inlineCode",{parentName:"p"},"results.json")," file in the ",(0,i.kt)("inlineCode",{parentName:"p"},"bench/results/"),", which can be checked in to GIT with\nyour changes to preserve them for future comparison."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn bench\n")),(0,i.kt)("p",null,"The benchmarks report and ",(0,i.kt)("inlineCode",{parentName:"p"},"results.json")," show a histogram of current\nperformance, as well as that of the previous ",(0,i.kt)("inlineCode",{parentName:"p"},"results.json"),". Running this should\nprobably be standard practice after making a large change which may affect\nperformance, but please create a baseline ",(0,i.kt)("inlineCode",{parentName:"p"},"results.json")," entry for your test\nmachine on a commit before your changes first, such that the effects of your PR\ncan be properly compared."))}c.isMDXComponent=!0}}]);